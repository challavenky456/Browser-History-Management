#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_URL_LENGTH 100

typedef struct Node {
    char url[MAX_URL_LENGTH];
    struct Node* prev;
    struct Node* next;
} Node;

Node* head = NULL;
Node* tail = NULL;
Node* current = NULL;

Node* createNode(char* url) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    strcpy(newNode->url, url);
    newNode->prev = newNode->next = NULL;
    return newNode;
}

void visit(char* url) {
    Node* newNode = createNode(url);
    if (head == NULL) {
        head = tail = current = newNode;
    } else {
        if (current != tail) {
            Node* temp = current->next;
            while (temp) {
                Node* next = temp->next;
                free(temp);
                temp = next;
            }
            current->next = NULL;
            tail = current;
        }
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
        current = newNode;
    }
    printf("Visited: %s\n", url);
}

void back() {
    if (current && current->prev) {
        current = current->prev;
        printf("Moved back to: %s\n", current->url);
    } else {
        printf("No previous website.\n");
    }
}

void forward() {
    if (current && current->next) {
        current = current->next;
        printf("Moved forward to: %s\n", current->url);
    } else {
        printf("No forward website.\n");
    }
}

void delete(char* url) {
    Node* temp = head;
    while (temp) {
        if (strcmp(temp->url, url) == 0) {
            if (temp == head) {
                head = temp->next;
                if (head) head->prev = NULL;
            } else if (temp == tail) {
                tail = temp->prev;
                if (tail) tail->next = NULL;
            } else {
                temp->prev->next = temp->next;
                temp->next->prev = temp->prev;
            }
            if (current == temp) {
                current = temp->prev ? temp->prev : temp->next;
            }
            free(temp);
            printf("Deleted: %s\n", url);
            return;
        }
        temp = temp->next;
    }
    printf("Website not found: %s\n", url);
}

void displayHistory() {
    Node* temp = head;
    if (!temp) {
        printf("No browsing history.\n");
        return;
    }
    printf("\n--- Browser History ---\n");
    while (temp) {
        if (temp == current)
            printf("%s <-- Current\n", temp->url);
        else
            printf("%s\n", temp->url);
        temp = temp->next;
    }
    printf("------------------------\n");
}

void clearHistory() {
    Node* temp = head;
    while (temp) {
        Node* next = temp->next;
        free(temp);
        temp = next;
    }
    head = tail = current = NULL;
    printf("Browser history cleared.\n");
}

void search(char* keyword) {
    Node* temp = head;
    int found = 0;
    while (temp) {
        if (strstr(temp->url, keyword)) {
            printf("Found: %s\n", temp->url);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found) {
        printf("No matching website found.\n");
    }
}

void sortHistory() {
    if (!head || !head->next) {
        printf("Not enough history to sort.\n");
        return;
    }

    Node* i = head->next;
    while (i) {
        char key[MAX_URL_LENGTH];
        strcpy(key, i->url);
        Node* j = i->prev;
        while (j && strcmp(j->url, key) > 0) {
            strcpy(j->next->url, j->url);
            j = j->prev;
        }
        if (j)
            strcpy(j->next->url, key);
        else
            strcpy(head->url, key);
        i = i->next;
    }
    printf("History sorted alphabetically.\n");
}

int main() {
    int choice;
    char url[MAX_URL_LENGTH];

    while (1) {
        printf("\n=== Browser History Menu ===\n");
        printf("1. Visit new website\n");
        printf("2. Back\n");
        printf("3. Forward\n");
        printf("4. Delete website\n");
        printf("5. Display history\n");
        printf("6. Clear history\n");
        printf("7. Search history\n");
        printf("8. Sort history alphabetically\n");
        printf("9. Exit\n");
        printf("Enter choice (1-9): ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                printf("Enter website URL: ");
                fgets(url, MAX_URL_LENGTH, stdin);
                url[strcspn(url, "\n")] = 0;
                visit(url);
                break;
            case 2:
                back();
                break;
            case 3:
                forward();
                break;
            case 4:
                printf("Enter URL to delete: ");
                fgets(url, MAX_URL_LENGTH, stdin);
                url[strcspn(url, "\n")] = 0;
                delete(url);
                break;
            case 5:
                displayHistory();
                break;
            case 6:
                clearHistory();
                break;
            case 7:
                printf("Enter keyword to search: ");
                fgets(url, MAX_URL_LENGTH, stdin);
                url[strcspn(url, "\n")] = 0;
                search(url);
                break;
            case 8:
                sortHistory();
                break;
            case 9:
                printf("Exiting Browser History Manager.\n");
                clearHistory();
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
